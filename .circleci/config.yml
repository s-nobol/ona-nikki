
version: 2
jobs:
  build:
    docker:
      # Specify the version you desire here
      - image: circleci/php:7.2-node-browsers

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # Using the RAM variation mitigates I/O contention
      # for database intensive operations.
      # mysqlの場合
      # - image: circleci/mysql:5.7-ram
      # postgresの場合
      - image: circleci/postgres:9.6-alpine
    environment:
      - APP_DEBUG: true
      - APP_ENV: testing
      - APP_KEY: base64:YlIJx6uH3OUb3hxN+PAiJKlC+EGZ2KYi8VHxsfdJpLk=
      #後日Mysqlに変更する
      - DB_CONNECTION: pgsql
      - DB_DATABASE: test
      - DB_USERNAME: username
      - DB_PASSWORD: password
      # - MYSQL_ALLOW_EMPTY_PASSWORD: true
    #   - image: redis:2.8.19

    steps:
      - checkout

      - run: sudo apt update # PHP CircleCI 2.0 Configuration File# PHP CircleCI 2.0 Configuration File sudo apt install zlib1g-dev libsqlite3-dev
      - run: sudo docker-php-ext-install zip

      # Download and cache dependencies
      - restore_cache:
          keys:
            # "composer.lock" can be used if it is committed to the repo
            - v1-dependencies-{{ checksum "composer.json" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run: composer install -n --prefer-dist

      - save_cache:
          key: v1-dependencies-{{ checksum "composer.json" }}
          paths:
            - ./vendor
      - restore_cache:
          keys:
            - node-v1-{{ checksum "package.json" }}
            - node-v1-
      - run: yarn install
      - save_cache:
          key: node-v1-{{ checksum "package.json" }}
          paths:
            - node_modules

      # prepare the database
      # #テストまでコメントアウト
      # - run: touch database/database.sqlite
      # - run: php artisan migrate --env=testing --database=sqlite

      # - run: composer require codeception/codeception --dev
      # - run: ./vendor/bin/codecept bootstrap
      # - run: ./vendor/bin/codecept build
      # - run: ./vendor/bin/codecept run
      
      
      # run テスト
      - run: php artisan migrate
      - run: php artisan db:seed
      - run: ./vendor/bin/phpunit